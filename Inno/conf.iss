; Script generated by the Inno Setup Script Wizard.
; SEE THE DOCUMENTATION FOR DETAILS ON CREATING INNO SETUP SCRIPT FILES!

#define MyAppName "PictureToPC"
#define MyAppVersion "0.8.0"
#define MyAppPublisher "Mees Studio"
#define MyAppURL "https://github.com/mightytry/PictureToPC/releases/tag/installer"
#define MyAppExeName "Main.exe"

[Setup]
; NOTE: The value of AppId uniquely identifies this application. Do not use the same AppId value in installers for other applications.
; (To generate a new GUID, click Tools | Generate GUID inside the IDE.)
AppId={{82744DD3-2F6B-485C-8BD6-849B093FCE58}
AppName={#MyAppName}
AppVersion={#MyAppVersion}
; AppVerName={#MyAppName} {#MyAppVersion}
AppPublisher={#MyAppPublisher}
AppPublisherURL={#MyAppURL}
AppSupportURL={#MyAppURL}
AppUpdatesURL={#MyAppURL}
DefaultDirName={autopf}\{#MyAppName}
DisableProgramGroupPage=yes
; Uncomment the following line to run in non administrative install mode (install for current user only.)
;PrivilegesRequired=lowest
PrivilegesRequiredOverridesAllowed=commandline
OutputBaseFilename=mysetup
Compression=lzma
SolidCompression=yes
WizardStyle=modern

[Languages]
Name: "deutsch"; MessagesFile: "compiler:Languages/German.isl"
Name: "english"; MessagesFile: "compiler:Default.isl"

[Tasks]
Name: "desktopicon"; Description: "{cm:CreateDesktopIcon}"; GroupDescription: "{cm:AdditionalIcons}"; Flags: unchecked

[Files]
Source: "Z:\Cloud\Programieren\Github\PictureToPC\Desktop\Updater\bin\Release\net6.0\{#MyAppExeName}"; DestDir: "{app}"; Flags: ignoreversion
Source: "Z:\Cloud\Programieren\Github\PictureToPC\Desktop\Updater\bin\Release\net6.0\Main.deps.json"; DestDir: "{app}"; Flags: ignoreversion
Source: "Z:\Cloud\Programieren\Github\PictureToPC\Desktop\Updater\bin\Release\net6.0\Main.dll"; DestDir: "{app}"; Flags: ignoreversion
Source: "Z:\Cloud\Programieren\Github\PictureToPC\Desktop\Updater\bin\Release\net6.0\Main.pdb"; DestDir: "{app}"; Flags: ignoreversion
Source: "Z:\Cloud\Programieren\Github\PictureToPC\Desktop\Updater\bin\Release\net6.0\Main.runtimeconfig.json"; DestDir: "{app}"; Flags: ignoreversion
Source: "Z:\Cloud\Programieren\Github\PictureToPC\Desktop\Updater\bin\Release\net6.0\Newtonsoft.Json.dll"; DestDir: "{app}"; Flags: ignoreversion
Source: "Z:\Cloud\Programieren\Github\PictureToPC\Desktop\Updater\bin\Release\net6.0\version"; DestDir: "{app}"; Flags: ignoreversion

Source: "{tmp}\innosetup-latest.exe"; DestDir: "{app}"; Flags: external
Source: "{tmp}\ISCrypt.dll"; DestDir: "{app}"; Flags: external
; NOTE: Don't use "Flags: ignoreversion" on any shared system files

[UninstallDelete]
Type: filesandordirs; Name: "{app}\Exe";
Type: filesandordirs; Name: "{app}\Main.*";
Type: filesandordirs; Name: "{app}\x64.*";
Type: filesandordirs; Name: "{app}\Newtonsoft.*";
Type: filesandordirs; Name: "{app}\version";

[Icons]
Name: "{autoprograms}\{#MyAppName}"; Filename: "{app}\{#MyAppExeName}"
Name: "{autodesktop}\{#MyAppName}"; Filename: "{app}\{#MyAppExeName}"; Tasks: desktopicon

[Run]
Filename: "{app}\{#MyAppExeName}"; Description: "{cm:LaunchProgram,{#StringChange(MyAppName, '&', '&&')}}"; Flags: nowait postinstall skipifsilent

[Code]
var
  DownloadPage: TDownloadWizardPage;
function OnDownloadProgress(const Url, FileName: String; const Progress, ProgressMax: Int64): Boolean;
begin
  if Progress = ProgressMax then
    Log(Format('Successfully downloaded file to {tmp}: %s', [FileName]));
  Result := True;
end;
procedure InitializeWizard;
begin
  DownloadPage := CreateDownloadPage(SetupMessage(msgWizardPreparing), SetupMessage(msgPreparingDesc), @OnDownloadProgress);
end;
function NextButtonClick(CurPageID: Integer): Boolean;
begin
  if (CurPageID = wpReady and FolderExists(ExpandConstant('{app}\yourapp.exe')) then begin
    DownloadPage.Clear;
    DownloadPage.Add('https://jrsoftware.org/download.php/is.exe', 'innosetup-latest.exe', '');
    DownloadPage.Add('https://jrsoftware.org/download.php/iscrypt.dll', 'ISCrypt.dll', '2f6294f9aa09f59a574b5dcd33be54e16b39377984f3d5658cda44950fa0f8fc');
    DownloadPage.Show;
    try
      try
        DownloadPage.Download; // This downloads the files to {tmp}
        Result := True;
      except
        if DownloadPage.AbortedByUser then
          Log('Aborted by user.')
        else
          SuppressibleMsgBox(AddPeriod(GetExceptionMessage), mbCriticalError, MB_OK, IDOK);
        Result := False;
      end;
    finally
      DownloadPage.Hide;
    end;
  end else
    Result := True;
end;